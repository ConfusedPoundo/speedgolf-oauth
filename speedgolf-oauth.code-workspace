{
	"folders": [
		{
			"path": "."
		}
	],
	"settings": {
		"textmarker.savedHighlights": [
			{
				"pattern": {
					"type": "string",
					"expression": "<p className=\"bg-danger login-error-msg-text\">{this.state.loginMsg}</p>",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "//ACCOUNTEXISTS route: Checks whether account with value of query param userId\r\n  //exists, returning true if so, false otherwise. Note that we pass the\r\n  //result as the 'result' property of a JSON object.\r\n  app.get('/accountexists', async(req, res, next) => {\r\n    console.log(\"in /accountexists route with query params = \" + JSON.stringify(req.query));\r\n    if (!req.query.hasOwnProperty(\"userId\")) {\r\n      //Request does not contain correct query parameters\r\n      return res.status(401).send(\"GET request for accountexists route is improperly formatted.\" +\r\n                                  \" It needs a 'userId' query parameter.\")\r\n    }\r\n    let thisUser;\r\n    try {\r\n      thisUser = await User.findOne({id: req.query.userId});\r\n      res.status(200).json({result: thisUser != null});\r\n    } catch (err) {\r\n      console.log(\"Error occurred when looking up or accessing user in database.\")\r\n      return next(err);\r\n    }\r\n  });",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "//SECURITYQUESTION route: Returns security question associated with user\r\n  //account with id === req.body.userId, if account exists. Otherwise returns\r\n  //message.\r\n  app.get('/securityquestion', async(req, res, next) => {\r\n    console.log(\"in /securityquestion route with query params = \" + JSON.stringify(req.query));\r\n    if (!req.query.hasOwnProperty(\"userId\")) {\r\n      //Request does not contain correct query parameters\r\n      return res.status(401).send(\"GET request for security question is improperly formatted.\" +\r\n                                  \" It needs a 'userId' query parameter.\")\r\n    }\r\n    let thisUser;\r\n    try {\r\n      thisUser = await User.findOne({id: req.query.userId});\r\n      if (!thisUser) { //now such account exists\r\n        res.status(401).send(\"There is no account associated with email '\" + req.query.userId + \"'.\");\r\n      } else { //account exists -- fetch securityQuestion\r\n        return res.status(200).send(thisUser.securityQuestion);\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Error occurred when looking up or accessing user in database.\")\r\n      return next(err);\r\n    }\r\n  });",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "//VERIFYSECURITYANSWER route: Returns true if the answer provided as a\r\n  //query param is the correct answer to the security question of the acount\r\n  //associated with userId, false otherwise. Note that result is returned within\r\n  //JSON object\r\n  app.get('/verifysecurityanswer', async(req, res, next) => {\r\n    console.log(\"in /verifysecurityanswer route with query params = \" + JSON.stringify(req.query));\r\n    if (!req.query.hasOwnProperty(\"userId\") || !req.query.hasOwnProperty(\"answer\")) {\r\n      //Request does not contain correct query parameters\r\n      return res.status(401).send(\"GET request for verifysecurityanswer is improperly formatted.\" +\r\n                                  \" It needs 'userId' and 'answer' query parameters.\")\r\n    }\r\n    let thisUser;\r\n    try {\r\n      thisUser = await User.findOne({id: req.query.userId});\r\n      if (!thisUser) { //now such account exists\r\n        res.status(401).send(\"There is no account associated with email '\" + req.query.userId + \"'.\");\r\n      } else { //account exists -- return whether answer matches answer on file\r\n        return res.status(200).json({result: req.query.answer === thisUser.securityAnswer});\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Error occurred when looking up or accessing user in database.\")\r\n      return next(err);\r\n    }\r\n  });",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "//RESETPASSWORD route: POST request to change the user's password. The message\r\n  //body is a JSON object containing three fields: userId, securityAnswer and\r\n  //newPassword. If securityAnswer does not match the one on file for userId,\r\n  //the request fails. Otherwise, the password is updated.\r\n  app.post('/resetpassword',  async (req, res, next) => {\r\n    console.log(\"in /resetpassword route with body = \" + JSON.stringify(req.body));\r\n    if (!req.body.hasOwnProperty(\"userId\") || \r\n        !req.body.hasOwnProperty(\"answer\") || \r\n        !req.body.hasOwnProperty(\"newPassword\")) {\r\n      //Body does not contain correct properties\r\n      return res.status(401).send(\"POST request for /resetpassword formulated incorrectly.\" +\r\n        \"Its body must contain 'userId', 'answer', and 'newPassword' fields.\")\r\n    }\r\n    let thisUser;\r\n    try {\r\n      thisUser = await User.findOne({id: req.body.userId});\r\n      if (!thisUser) { //account already exists\r\n        res.status(401).send(\"There is no account with email '\" + req.body.userId + \"'.\");\r\n      } else if (thisUser.authStrategy != \"local\") {\r\n        res.status(401).send(\"Cannot reset password on account with userId \" + req.body.userId +\r\n          \". The user does not have a local account. \");\r\n      } else if (thisUser.securityAnswer != req.body.answer) { //security answer incorrect \r\n        res.status(401).send(\"Password not reset because security answer does not match answer on file.\");\r\n      } else { //Can try to update password\r\n        try {\r\n          let status = await User.updateOne({id: req.body.userId},{password: req.body.newPassword});\r\n          if (status.nModified != 1) { //Should never happen!\r\n            res.status(401).send(\"User account exists in database but password could not be updated.\");\r\n          } else {\r\n            res.status(200).send(\"User password successfully updated.\")\r\n          }\r\n        } catch (err) {\r\n          console.log(\"Error occurred when updating user password in database.\")\r\n          return next(err);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Error occurred when looking up user in database.\")\r\n      return next(err);\r\n    }\r\n  });",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			}
		]
	}
}